package SimulationFramework;

import java.util.ArrayList;
import java.util.List;

public class GBMStockPath implements StockPath
{
	// Mean and standard deviation of prices
	public double _mu, _sigma;
	// Initial price s0
	public double _s0;
	
	// Generating normal random variables
	NormalRandomVectorGenerator z = new NormalRandomVectorGenerator();
	double[] normalRand = z.getVector();
	
	
	private List<Pair<Integer, Double>> GBMStockPrices = new ArrayList<Pair<Integer, Double>>();
	
	// Note the values of mu and sigma should be both on daily basis or monthly basis or whatever depending on requirement 
	public GBMStockPath(double s0, double mu, double sigma)
	{
		this._mu = mu;
		this._sigma = sigma;
		this._s0 = s0;
		//Note we generate S(t) from S(t-1) for all t.
		double tempS = s0*(Math.exp((mu-(sigma*sigma*0.5)+(sigma*normalRand[0]))));
		GBMStockPrices.add(new Pair<Integer, Double>(1, tempS));
		for(int i=1; i< normalRand.length; i++)
		{
			tempS = (GBMStockPrices.get(i-1).getSecondObject())*(Math.exp((mu-(sigma*sigma*0.5)+(sigma*normalRand[i]))));
			GBMStockPrices.add(new Pair<Integer, Double>((i+1), tempS));
		}
	}

	@Override
	public List<Pair<Integer, Double>> getPrices() 
	{
		// TODO Auto-generated method stub
		return GBMStockPrices;
	}
	
	// This method gives the stock path generated by negation of normal random vector coordinates. 
	public TransformedStockPath getAntiPath()
	{
		ScalingShiftingDecorator antiPrices = new ScalingShiftingDecorator(this.z, 0.0, -1.0);
		double[] antiPriceVector = antiPrices.getVector();
		List<Pair<Integer, Double>> GBMAntiStockPrices = new ArrayList<Pair<Integer, Double>>();
		//Note we generate S(t) from S(t-1) for all t.
		//GBMStockPath GBMAntiStockPrices = new GBMStockPath(this._s0, this._mu, this._sigma);
		double tempS = _s0*(Math.exp((_mu-(_sigma*_sigma*0.5)+(_sigma*antiPriceVector[0]))));
		GBMAntiStockPrices.add(new Pair<Integer, Double>(1, tempS));
		for(int i=1; i< antiPriceVector.length; i++)
		{
			tempS = (GBMAntiStockPrices.get(i-1).getSecondObject())*(Math.exp((_mu-(_sigma*_sigma*0.5)+(_sigma*antiPriceVector[i]))));
			GBMAntiStockPrices.add(new Pair<Integer, Double>((i+1), tempS));
		}
		TransformedStockPath GBMAntiStockPath = new TransformedStockPath(GBMAntiStockPrices);
		return GBMAntiStockPath;
	}
	
	/*
	public static void main(String[] args)
	{
		GBMStockPath p = new GBMStockPath(152.35, 0.0001, 0.01);
		StockPath q = p.getAntiPath();
		for(int i=0; i< q.getPrices().size(); i++)
		{
			System.out.println("Int: " + q.getPrices().get(i).getFirstObject());
			System.out.println("Price: " + q.getPrices().get(i).getSecondObject() + "   " + p.getPrices().get(i).getSecondObject());
		}
	}
	*/
}
